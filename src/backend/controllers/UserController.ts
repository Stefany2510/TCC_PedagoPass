import { Request, Response } from 'express';
import UserService from '../services/UserService';
import { UserDTO, LoginDTO } from '../models/User';

class UserController {
  public async register(req: Request, res: Response): Promise<Response> {
    try {
      const userData: UserDTO = req.body;

      // Valida√ß√£o b√°sica
      if (!userData.email || !userData.password || !userData.name) {
        return res.status(400).json({ error: 'Todos os campos s√£o obrigat√≥rios' });
      }

      const result = UserService.register(userData);
      return res.status(201).json(result);
    } catch (error) {
      if (error instanceof Error) {
        return res.status(400).json({ error: error.message });
      }
      return res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  public async login(req: Request, res: Response): Promise<Response> {
    try {
      const loginData: LoginDTO = req.body;

      // Valida√ß√£o b√°sica
      if (!loginData.email || !loginData.password) {
        return res.status(400).json({ error: 'Email e senha s√£o obrigat√≥rios' });
      }

      const result = UserService.login(loginData);
      return res.status(200).json(result);
    } catch (error) {
      if (error instanceof Error) {
        return res.status(401).json({ error: error.message });
      }
      return res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }

  public async updateProfile(req: Request, res: Response): Promise<Response> {
    try {
      console.log('üîÑ Requisi√ß√£o de atualiza√ß√£o de perfil recebida');
      console.log('üìä Body da requisi√ß√£o:', req.body);
      
      const userData = req.body;

      // Valida√ß√£o b√°sica
      if (!userData.email || !userData.name) {
        console.log('‚ùå Valida√ß√£o falhou: email ou name ausente');
        return res.status(400).json({ error: 'Nome e email s√£o obrigat√≥rios' });
      }

      console.log('‚úÖ Valida√ß√£o passou, simulando atualiza√ß√£o...');
      
      // Simular atualiza√ß√£o bem-sucedida
      const updatedUser = {
        id: '1',
        name: userData.name,
        email: userData.email,
      };

      console.log('‚úÖ Perfil atualizado com sucesso:', updatedUser);

      return res.status(200).json({
        success: true,
        user: updatedUser,
        message: 'Perfil atualizado com sucesso!'
      });
    } catch (error) {
      console.log('‚ùå Erro ao atualizar perfil:', error);
      if (error instanceof Error) {
        return res.status(400).json({ error: error.message });
      }
      return res.status(500).json({ error: 'Erro interno do servidor' });
    }
  }
}

export default new UserController();
